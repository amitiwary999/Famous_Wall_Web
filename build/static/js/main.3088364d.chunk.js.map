{"version":3,"sources":["layout/navbar.js","App.js","serviceWorker.js","redux/reducer/homeReducer.js","redux/reducer/loginReducer.js","redux/reducer/profileReducer.js","redux/reducer/rootReducer.js","redux/storeConfig/store.js","index.js","common/util.js","firebase/Firebase.js","firebase/Auth.js","firebase/LoadingSpinner.js"],"names":["NavbarLayout","currentUser","useContext","AuthContext","history","useHistory","useState","isOpen","setIsOpen","Navbar","className","expand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","href","style","display","cursor","replace","firebase","auth","signOut","then","console","log","catch","error","Home","lazy","Login","videoCall","profile","App","axios","defaults","headers","post","baseURL","pages","pageLink","view","displayName","Auth","fallback","render","location","map","page","index","exact","path","match","key","to","Boolean","window","hostname","INITIAL_STATE","famousPosts","lastItemId","hasMoreItems","loadItemStatus","loginStatus","selfProfile","profileFetchStatus","rootReducer","combineReducers","home","state","action","type","payload","length","concat","SUCCESS","FAILURE","PENDING","pos","postId","item","creatorId","isLiked","updatedPosts","slice","position","likePostId","likeItem","login","middlewares","thunk","createDebounce","createLogger","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","IMAGE_MEDIA","VIDEO_MEDIA","getHash","input","hash","len","i","charCodeAt","notify","msg","title","addNotification","insert","container","animationIn","animationOut","dismiss","duration","uploadMedia","selectedMediaFile","mediaType","Promise","resolve","reject","time","Date","getTime","storage","ref","name","put","on","snapshot","child","getDownloadURL","url","err","generateProfileId","emailId","toLowerCase","split","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createContext","AuthProvider","children","setCurrentUser","pending","setPending","useEffect","onAuthStateChanged","user","Provider","value","ComponentSpinner","React","Component"],"mappings":"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","file":"static/js/main.3088364d.chunk.js","sourcesContent":["/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable react/react-in-jsx-scope */\n/* eslint-disable no-unused-expressions */\nimport React, { useContext, useState } from 'react';\nimport {\n  Navbar, NavbarToggler, Collapse, Nav, NavItem, NavLink,\n} from 'reactstrap';\nimport { useHistory } from 'react-router-dom';\nimport { AuthContext } from '../firebase/Auth';\nimport firebase from '../firebase/Firebase';\n\nconst NavbarLayout = () => {\n  const { currentUser } = useContext(AuthContext);\n  const history = useHistory();\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleNav = () => setIsOpen(!isOpen);\n\n  const loadProfile = () => {\n    history.replace('/profile');\n  };\n\n  const logout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        console.log('logout successfully');\n      })\n      .catch((error) => {\n        console.error(`logout failed ${error}`);\n      });\n  };\n\n  return (\n    <Navbar className=\"bg-dark navbar-dark sticky-top\" expand=\"md\">\n      <NavbarToggler onClick={toggleNav} />\n      <Collapse isOpen={isOpen} navbar>\n        <Nav className=\"mr-auto\" navbar>\n          <NavItem>\n            <NavLink href=\"/\">Home</NavLink>\n          </NavItem>\n          <NavItem style={{ display: currentUser ? 'block' : 'none' }}>\n            <NavLink\n              style={{ display: currentUser ? 'block' : 'none', cursor: 'pointer' }}\n              onClick={loadProfile}\n            >\n              Profile\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              style={{ display: currentUser ? 'block' : 'none', cursor: 'pointer' }}\n              onClick={() => logout()}\n            >\n              Logout\n            </NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </Navbar>\n  );\n};\n\nexport default NavbarLayout;\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { lazy, useState, Suspense } from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport axios from 'axios';\nimport ReactNotification from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\nimport { AuthProvider } from './firebase/Auth';\nimport NavbarLayout from './layout/navbar';\n\nconst Home = lazy(() => import('./view/home/home'));\nconst Login = lazy(() => import('./view/login/Login'));\nconst videoCall = lazy(() => import('./view/VideoCall/VideoCallView'));\nconst profile = lazy(() => import('./view/profile/Profle'));\n\nfunction App() {\n  axios.defaults.headers.post['Content-Type'] = 'application/json';\n  axios.defaults.baseURL = 'https://fwalls-dot-expinf.appspot.com/';\n\n  const pages = [\n    {\n      pageLink: '/',\n      view: Home,\n    },\n    {\n      pageLink: '/login',\n      view: Login,\n      displayName: 'Home',\n    },\n    {\n      pageLink: '/videocall',\n      view: videoCall,\n      displayName: 'VideoCall',\n    },\n    {\n      pageLink: '/profile/:id',\n      view: profile,\n      displayName: 'Profile',\n    },\n    {\n      pageLink: '/profile',\n      view: profile,\n      displayName: 'Profile',\n    },\n  ];\n  return (\n    <AuthProvider>\n      <div className=\"App\">\n        <ReactNotification />\n        <Suspense fallback={<div />}>\n          <Router>\n            <Route\n              render={({ location }) => (\n                <>\n                  <NavbarLayout />\n                  <Switch location={location}>\n                    {pages.map((page, index) => (\n                      <Route\n                        exact\n                        path={page.pageLink}\n                        render={({ match }) => <page.view />}\n                        key={index}\n                      />\n                    ))}\n                    <Redirect to=\"/\" />\n                  </Switch>\n                </>\n              )}\n            />\n          </Router>\n        </Suspense>\n      </div>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable import/prefer-default-export */\nimport { SUCCESS, FAILURE, PENDING } from '../../common/util';\n\nconst INITIAL_STATE = {\n  famousPosts: [],\n  lastItemId: '',\n  hasMoreItems: true,\n  loadItemStatus: '',\n};\n\nexport const homeReducer = (state = INITIAL_STATE, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case 'LOADED_NEW_POSTS':\n      console.log(`fm payload ${payload.length}`);\n      return { ...state, hasMoreItems: true, famousPosts: state.famousPosts.concat(payload) };\n\n    case 'UPDATE_LAST_ITEM':\n      return { ...state, lastItemId: payload };\n\n    case 'NO_MORE_ITEM':\n      return { ...state, hasMoreItems: false };\n\n    case 'LOAD_NEW_POSTS_SUCCESS':\n      return { ...state, loadItemStatus: SUCCESS };\n\n    case 'LOAD_NEW_POSTS_FAILURE':\n      return { ...state, loadItemStatus: FAILURE };\n\n    case 'LOAD_NEW_POSTS_PENDING':\n      return { ...state, loadItemStatus: PENDING };\n\n    case 'POST_LIKE_FAILED':\n      const { pos } = payload;\n      const { postId } = payload;\n      const item = state.famousPosts[pos];\n      if (item && postId && item.creatorId === postId) {\n        item.isLiked = 0;\n        const updatedPosts = [...state.famousPosts.slice(0, pos), item, ...state.famousPosts.slice(pos + 1)];\n        return { ...state, famousPosts: updatedPosts };\n      }\n      return state;\n\n    case 'POST_LIKE_SUCCESS': {\n      const position = payload.pos;\n      const likePostId = payload.postId;\n      const likeItem = state.famousPosts[position];\n      if (likeItem && likePostId && likeItem.postId === likePostId) {\n        likeItem.isLiked = likeItem.isLiked === 0 ? 1 : 0;\n        const updatedPosts = [...state.famousPosts.slice(0, position), likeItem, ...state.famousPosts.slice(position + 1)];\n        return { ...state, famousPosts: updatedPosts };\n      }\n    }\n      return state;\n\n    default:\n      return state;\n  }\n};\n","import { FAILURE, PENDING, SUCCESS } from \"../../common/util\";\n\nconst INITIAL_STATE = {\n    loginStatus: ''\n}\n\nexport const loginReducer = (state = INITIAL_STATE, action) => {\n    const {type, payload} = action;\n\n    switch(type){\n        case 'LOGIN_FAILED':\n            return {...state, loginStatus: FAILURE}\n\n        case 'LOGIN_SUCCESS':\n            return {...state, loginStatus: SUCCESS}  \n            \n        case 'LOGIN_PENDING':\n            return {...state, loginStatus: PENDING}    \n\n        default:\n            return state    \n    }\n}","/* eslint-disable import/prefer-default-export */\nimport { FAILURE, SUCCESS } from '../../common/util';\n\nconst INITIAL_STATE = {\n  selfProfile: {},\n  profileFetchStatus: '',\n};\n\nexport const profileReducer = (state = INITIAL_STATE, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case 'FETCH_SELF_PROFILE_SUCCESS':\n      return { ...state, selfProfile: payload, profileFetchStatus: SUCCESS };\n\n    case 'FETCH_SELF_PROFILE_FAILED':\n      return { ...state, profileFetchStatus: FAILURE };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { homeReducer } from './homeReducer';\nimport { loginReducer } from './loginReducer';\nimport { profileReducer } from './profileReducer';\n\nconst rootReducer = combineReducers({\n  home: homeReducer,\n  login: loginReducer,\n  selfProfile: profileReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createDebounce from \"redux-debounced\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from '../reducer/rootReducer';\nimport { createLogger } from \"redux-logger\";\n\nconst middlewares = [thunk, createDebounce()];\nconst logger = createLogger({});\n\nif (process.env.NODE_ENV == \"development\") {\n  middlewares.push(logger);\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  {},\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n\nexport { store };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/storeConfig/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { store } from 'react-notifications-component';\nimport firebase from '../firebase/Firebase';\n\nexport const IMAGE_MEDIA = 'image';\nexport const VIDEO_MEDIA = 'video';\nexport const MUSIC_MEDIA = 'audio';\nexport const PENDING = 'pending';\nexport const SUCCESS = 'success';\nexport const FAILURE = 'failure';\n\nexport const getHash = (input) => {\n  let hash = 0; const\n    len = input.length;\n  for (let i = 0; i < len; i++) {\n    hash = ((hash << 5) - hash) + input.charCodeAt(i);\n    hash |= 0; // to 32bit integer\n  }\n  return hash;\n};\n\nexport const authToken = () => new Promise(((resolve, reject) => {\n  firebase.auth().onAuthStateChanged((user) => {\n    if (user != null && user != undefined) {\n      user.getIdToken().then((token) => {\n        if (token != null && token !== undefined) {\n          const tokenAndUserId = {\n            userId: user.uid,\n            token,\n          };\n          resolve(tokenAndUserId);\n        } else {\n          reject(Error('token null'));\n        }\n      });\n    } else {\n      reject(Error('token null'));\n    }\n  });\n}));\n\nexport const notify = (msg, type, title = '') => {\n  store.addNotification({\n    title: title || (type == 'success' ? 'Awesome' : 'Error'),\n    message: msg,\n    type,\n    insert: 'bottom',\n    container: 'bottom-right',\n    animationIn: ['animated', 'fadeIn'],\n    animationOut: ['animated', 'fadeOut'],\n    dismiss: {\n      duration: 5000,\n    },\n  });\n};\n\nexport const uploadMedia = (selectedMediaFile, mediaType) => new Promise((resolve, reject) => {\n  const time = new Date().getTime();\n  console.log(selectedMediaFile);\n  const storage = firebase.storage();\n  const uploadTask = storage.ref(`${mediaType}/${time + selectedMediaFile.name}`).put(selectedMediaFile);\n  uploadTask.on(\n    'state_changed',\n    (snapshot) => { },\n    (error) => {\n      reject(error);\n    },\n    () => {\n      storage\n        .ref(mediaType)\n        .child(time + selectedMediaFile.name)\n        .getDownloadURL()\n        .then((url) => {\n          resolve(url);\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    },\n  );\n});\n\nexport const generateProfileId = (emailId) => emailId.toLowerCase().split('@')[0] + new Date().getTime();\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport 'firebase/firestore';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: 'AIzaSyCR5IyeN4-C3OLtwf-GxkabJp_0eeh9Ris',\n  authDomain: 'expinf.firebaseapp.com',\n  databaseURL: 'https://expinf.firebaseio.com',\n  projectId: 'expinf',\n  storageBucket: 'expinf.appspot.com',\n  messagingSenderId: '538184241590',\n  appId: '1:538184241590:web:e2971c7c9c90c8276c3117',\n  measurementId: 'G-0KH5XHEJMD',\n\n};\n\nfirebase.initializeApp(config);\nexport default firebase;\n","import React, { useEffect, useState, createContext } from 'react';\nimport firebase from './Firebase';\nimport Spinner from './LoadingSpinner';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [pending, setPending] = useState(true);\n  useEffect(() => {\n    console.log('auth pr ');\n    firebase.auth().onAuthStateChanged((user) => {\n      console.log(`user ${user}`);\n      setCurrentUser(user);\n      setPending(false);\n    });\n  }, []);\n  if (pending) {\n    return <Spinner />;\n  }\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import React from 'react';\nimport './app-loader.scss';\nclass ComponentSpinner extends React.Component {\n    render() {\n        return (\n            <div className=\"fallback-spinner\">\n                <div className=\"loading component-loader\">\n                    <div className=\"effect-1 effects\"></div>\n                    <div className=\"effect-2 effects\"></div>\n                    <div className=\"effect-3 effects\"></div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ComponentSpinner;"],"sourceRoot":""}